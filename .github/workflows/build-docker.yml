name: Build, Push et Déploiement Docker

# On déclenche ce workflow à chaque push sur la branche main.
on:
  push:
    branches:
      - master

# On donne au GITHUB_TOKEN le droit d'écrire dans GHCR (packages: write).
permissions:
  contents: read
  packages: write

jobs:
  build_and_push:
    name: Construire et Pousser l'image Docker
    runs-on: ubuntu-latest

    steps:
      - name: Récupérer le dépôt
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configurer QEMU (optionnel, pour multi-arch)
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2

      - name: Configurer Docker Buildx (optionnel, pour multi-arch)
        uses: docker/setup-buildx-action@v2

      - name: Se connecter à ghcr.io (PAT ou GITHUB_TOKEN)
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          # Utilisez soit GITHUB_TOKEN (si vos "Workflow permissions" sont bien en Read/Write)
          # password: ${{ secrets.GITHUB_TOKEN }}
          # +–––––––––––––––––––––––––––––––––––––––––––––––––––
          # Soit un PAT GitHub (= scope write:packages) stocké dans
          # un secret `GHCR_PAT`
          password: ${{ secrets.GHCR_PAT }}

      - name: Construire et pousser l'image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/bauloup1999/next-cda241/next-app:latest

      - name: Vérifier que l'image existe dans GHCR
        run: |
          echo "Tags disponibles pour ghcr.io/bauloup1999/next-cda241/next-app"
          curl -H "Authorization: Bearer ${{ secrets.GHCR_PAT }}" \
               -s https://ghcr.io/v2/bauloup1999/next-cda241/next-app/tags/list | jq .

  deploy:
    name: Déployer sur l'instance EC2
    needs: build_and_push
    runs-on: ubuntu-latest

    steps:
      - name: "Déployer via SSH"
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script: |
            # 1. Pull de la nouvelle image
            docker pull ghcr.io/bauloup1999/next-cda241/next-app:latest

            # 2. Arrêt + suppression de l'ancien conteneur (si existe)
            docker stop next-app || true
            docker rm next-app  || true

            # 3. Lancement du nouveau conteneur sur le port 80
            docker run -d \
              --name next-app \
              -p 80:3000 \
              ghcr.io/bauloup1999/next-cda241/next-app:latest

            # 4. (Optionnel) Vérifier que c'est bien lancé
            docker ps --filter "name=next-app"
