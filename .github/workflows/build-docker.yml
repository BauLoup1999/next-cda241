name: CI/CD Docker (Test & Prod)

on:
  push:
    branches:
      - develop
      - master

permissions:
  contents: read
  packages: write

jobs:
  build:
    name: build
    runs-on: ubuntu-latest

    steps:
      - name: Récupérer le dépôt
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configurer QEMU (optionnel)
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2

      - name: Configurer Docker Buildx (optionnel)
        uses: docker/setup-buildx-action@v2

      - name: Connexion au registre GitHub Container
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Construire et pousser l'image Docker
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/bauloup1999/next-cda241/next-app:latest

      - name: Vérifier l'image poussée
        run: |
          echo "Tags disponibles pour ghcr.io/bauloup1999/next-cda241/next-app"
          curl -H "Authorization: Bearer ${{ secrets.GHCR_PAT }}" \
               -s https://ghcr.io/v2/bauloup1999/next-cda241/next-app/tags/list | jq .

  deploy-test:
    name: env test
    if: github.ref == 'refs/heads/develop'
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Déployer sur le serveur de test via SSH
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script: |
            cd /home/${{ secrets.SSH_USER }}/next-cda241

            # Si le repo n'existe pas encore, on le clone en develop
            if [ ! -d ".git" ]; then
              git clone --branch develop https://github.com/${{ github.repository_owner }}/next-cda241.git .
            else
              git fetch origin develop
              git checkout develop
              git pull origin develop
            fi

            # Authentification GHCR pour pull de l'image privée
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u bauloup1999 --password-stdin

            # Pull + up: 
            docker-compose -f docker-compose.dev.yml pull
            docker-compose -f docker-compose.dev.yml up -d

  deploy-prod:
    name: env prod
    if: github.ref == 'refs/heads/master'
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Déployer sur le serveur de prod via SSH
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script: |
            cd /home/${{ secrets.SSH_USER }}/next-cda241

            # Si le repo n'existe pas encore, on le clone en master
            if [ ! -d ".git" ]; then
              git clone --branch master https://github.com/${{ github.repository_owner }}/next-cda241.git .
            else
              git fetch origin master
              git checkout master
              git pull origin master
            fi

            # Authentification GHCR pour pull de l'image privée
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u bauloup1999 --password-stdin

            # Pull + up: 
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d
