name: CI – build + tests + deploy

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  build:
    name: Build Next.js
    runs-on: ubuntu-latest

    steps:
      - name: Checkout du dépôt
        uses: actions/checkout@v4

      - name: Cache node_modules (build)
        id: cache-node-build
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Setup Node.js (v18.x)
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Installation des dépendances (build)
        if: steps.cache-node-build.outputs.cache-hit != 'true'
        run: npm ci

      - name: Build Next.js
        run: npm run build

  test:
    name: Tests Cypress
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout du dépôt
        uses: actions/checkout@v4

      - name: Cache node_modules (test)
        id: cache-node-test
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Cache Cypress binaire
        id: cache-cypress-binary
        uses: actions/cache@v3
        with:
          path: ~/.cache/Cypress
          key: ${{ runner.os }}-cypress-binary-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-cypress-binary-

      - name: Setup Node.js (v18.x)
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Installation des dépendances (test)
        if: steps.cache-node-test.outputs.cache-hit != 'true'
        run: npm ci

      - name: Build Next.js (recréation de .next)
        run: npm run build

      - name: Install Cypress binary
        if: steps.cache-cypress-binary.outputs.cache-hit != 'true'
        run: npx cypress install

      - name: Démarrage du serveur Next.js
        run: |
          nohup npm run start &
          npx wait-on http://localhost:3000
        env:
          NODE_ENV: production

      - name: Exécution des tests Cypress
        run: npx cypress run

      - name: Upload des vidéos Cypress
        uses: actions/upload-artifact@v4
        with:
          name: cypress-videos
          path: cypress/videos

  deploy:
    name: Déploiement en prod
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')  
    steps:
      - name: Checkout du dépôt
        uses: actions/checkout@v4

      - name: Configurer la clé SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # Optionnel : désactiver la vérification des hôtes si tu n'as pas ajouté manuellement le serveur dans known_hosts
          echo -e "Host ${{ secrets.SSH_HOST }}\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}

      - name: Déployer sur le serveur via SSH
        uses: appleboy/ssh-action@v0.7.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            # → Ici, adapte le chemin vers ton répertoire de production
            cd /var/www/mon-app

            # Option A : Utiliser git pull directement (si le repo est cloné en prod)
            git pull origin main

            # Option B : Si tu préfères synchroniser avec rsync, remplacer par :
            # rsync -avz --delete ./ user@serveur:/var/www/mon-app

            # Installer / mettre à jour les dépendances
            npm ci

            # Rebuild (Next.js ou autre)
            npm run build

            # Redémarrer le serveur : exemple avec PM2
            pm2 restart mon-app

            # Si tu utilises systemd, ça peut être :
            # sudo systemctl restart mon-app.service
