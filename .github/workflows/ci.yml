name: CI – build + tests + deploy

on:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main

jobs:
  build:
    name: Build Next.js
    runs-on: ubuntu-latest

    steps:
      - name: Checkout du dépôt
        uses: actions/checkout@v4

      - name: Cache node_modules (build)
        id: cache-node-build
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Setup Node.js (v18.x)
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Installation des dépendances (build)
        if: steps.cache-node-build.outputs.cache-hit != 'true'
        run: npm ci

      - name: Build Next.js
        run: npm run build

  test:
    name: Tests Cypress
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout du dépôt
        uses: actions/checkout@v4

      - name: Cache node_modules (test)
        id: cache-node-test
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Cache Cypress binaire
        id: cache-cypress-binary
        uses: actions/cache@v3
        with:
          path: ~/.cache/Cypress
          key: ${{ runner.os }}-cypress-binary-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-cypress-binary-

      - name: Setup Node.js (v18.x)
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Installation des dépendances (test)
        if: steps.cache-node-test.outputs.cache-hit != 'true'
        run: npm ci

      - name: Build Next.js (recréation de .next)
        run: npm run build

      - name: Install Cypress binary
        if: steps.cache-cypress-binary.outputs.cache-hit != 'true'
        run: npx cypress install

      - name: Démarrage du serveur Next.js
        run: |
          nohup npm run start &
          npx wait-on http://localhost:3000
        env:
          NODE_ENV: production

      - name: Exécution des tests Cypress
        run: npx cypress run

      - name: Upload des vidéos Cypress
        uses: actions/upload-artifact@v4
        with:
          name: cypress-videos
          path: cypress/videos

  deploy:
    name: Déploiement en prod
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')

    steps:
      - name: Checkout du dépôt
        uses: actions/checkout@v4

      - name: Configurer la clé SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # Désactive StrictHostKeyChecking pour ne pas refuser le host si nouveau
          echo -e "Host ${{ secrets.SSH_HOST }}\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}

      - name: Déployer sur la VM via SSH
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SSH_HOST }}       # ex. 44.196.80.112
          username: ${{ secrets.SSH_USER }}   # ex. ubuntu
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script: |
            # Chemin où l’on veut déployer l’app
            DEPLOY_DIR="/var/www/mon-app"

            # Si le dossier n'existe pas encore, on clone le repo
            if [ ! -d "$DEPLOY_DIR" ]; then
              echo "Le dossier $DEPLOY_DIR n'existe pas. Clonage du dépôt..."
              git clone https://github.com/BauLoup1999/next-cda241.git "$DEPLOY_DIR"
            fi

            # Se placer dans le dossier
            cd "$DEPLOY_DIR" || exit 1

            # S'assurer d'être sur la branche correcte (master ou main)
            if [ "${{ github.ref }}" = "refs/heads/master" ]; then
              git checkout master
              git pull origin master
            else
              git checkout main
              git pull origin main
            fi

            # Installer/mettre à jour les dépendances
            npm ci

            # Rebuilder l’application Next.js
            npm run build

            # Relancer l’application en prod
            #  → Méthode 1 : npm run start
            echo "Redémarrage de l’application avec npm run start..."
            pkill -f "npm run start" || true
            nohup npm run start &

            #  → Méthode 2 (optionnelle, si vous utilisez PM2 
            #     et que celui-ci est installé globalement) :
            # echo "Redémarrage avec PM2..."
            # pm2 start npm --name "mon-app" -- run start --update-env

            echo "Déploiement terminé."

